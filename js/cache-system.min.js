class CacheSystem{constructor(){this.cache=new Map();this.config={maxSize: 100,defaultTTL: 5*60*1000,cleanupInterval: 60*1000,compression: true,enablePersistence: true};this.strategies={'static': 24*60*60*1000,'dynamic': 5*60*1000,'user': 15*60*1000,'admin': 2*60*1000,'realtime': 30*1000};this.metrics={hits: 0,misses: 0,writes: 0,evictions: 0,startTime: Date.now()};this.init();}init(){this.startCleanup();this.loadPersistentCache();window.addEventListener('beforeunload',()=>{this.savePersistentCache();});document.addEventListener('visibilitychange',()=>{if(document.hidden){this.savePersistentCache();}});}get(key){const entry=this.cache.get(key);if(!entry){this.metrics.misses++;return null;}if(Date.now()> entry.expiresAt){this.cache.delete(key);this.metrics.misses++;return null;}entry.lastAccess=Date.now();this.metrics.hits++;return this.decompress(entry.data);}set(key,value,ttl='dynamic'){let expirationTime;if(typeof ttl==='number'){expirationTime=Date.now()+ttl;}else{expirationTime=Date.now()+(this.strategies[ttl] || this.config.defaultTTL);}const entry={data: this.compress(value),expiresAt: expirationTime,createdAt: Date.now(),lastAccess: Date.now(),strategy: ttl,size: this.getSize(value)};if(this.cache.size >=this.config.maxSize){this.evictLRU();}this.cache.set(key,entry);this.metrics.writes++;}async getOrSet(key,fetchFn,ttl='dynamic'){let data=this.get(key);if(data !==null){return data;}try{data=await fetchFn();this.set(key,data,ttl);return data;}catch(error){console.error('Cache fetch error:',error);throw error;}}invalidate(pattern){if(typeof pattern==='string'){this.cache.delete(pattern);}else if(pattern instanceof RegExp){for(const key of this.cache.keys()){if(pattern.test(key)){this.cache.delete(key);}}}}invalidateTag(tag){this.invalidate(new RegExp(`^${tag}:`));}evictLRU(){let oldestKey=null;let oldestTime=Infinity;for(const [key,entry] of this.cache.entries()){if(entry.lastAccess < oldestTime){oldestTime=entry.lastAccess;oldestKey=key;}}if(oldestKey){this.cache.delete(oldestKey);this.metrics.evictions++;}}cleanup(){const now=Date.now();let cleanedCount=0;for(const [key,entry] of this.cache.entries()){if(now > entry.expiresAt){this.cache.delete(key);cleanedCount++;}}return cleanedCount;}startCleanup(){setInterval(()=>{this.cleanup();},this.config.cleanupInterval);}compress(data){if(!this.config.compression)return data;if(typeof data==='object' && data !==null){try{const jsonString=JSON.stringify(data);return{__compressed: true,data: jsonString};}catch(e){return data;}}return data;}decompress(data){if(data && typeof data==='object' && data.__compressed){try{return JSON.parse(data.data);}catch(e){return data;}}return data;}getSize(obj){let size=0;if(typeof obj==='string'){size=obj.length*2;}else if(typeof obj==='object' && obj !==null){size=JSON.stringify(obj).length*2;}else{size=8;}return size;}savePersistentCache(){if(!this.config.enablePersistence)return;try{const cacheData={entries: Array.from(this.cache.entries()),timestamp: Date.now()};localStorage.setItem('khanelconcept_cache',JSON.stringify(cacheData));}catch(error){console.warn('Could not save cache to localStorage:',error);}}loadPersistentCache(){if(!this.config.enablePersistence)return;try{const savedData=localStorage.getItem('khanelconcept_cache');if(!savedData)return;const cacheData=JSON.parse(savedData);const now=Date.now();if(now-cacheData.timestamp > 24*60*60*1000){localStorage.removeItem('khanelconcept_cache');return;}for(const [key,entry] of cacheData.entries){if(now < entry.expiresAt){this.cache.set(key,entry);}}}catch(error){console.warn('Could not load cache from localStorage:',error);}}getStats(){const totalRequests=this.metrics.hits+this.metrics.misses;const hitRate=totalRequests > 0 ?(this.metrics.hits/totalRequests)*100 : 0;const uptime=Date.now()-this.metrics.startTime;return{size: this.cache.size,maxSize: this.config.maxSize,hits: this.metrics.hits,misses: this.metrics.misses,writes: this.metrics.writes,evictions: this.metrics.evictions,hitRate: hitRate.toFixed(2)+'%',uptime: Math.floor(uptime/1000)+'s',memoryUsage: this.getMemoryUsage()};}getMemoryUsage(){let totalSize=0;let entryCount=0;for(const [key,entry] of this.cache.entries()){totalSize+=entry.size || 0;entryCount++;}return{totalSize: totalSize,averageSize: entryCount > 0 ? Math.round(totalSize/entryCount): 0,entries: entryCount};}clear(){this.cache.clear();this.metrics={hits: 0,misses: 0,writes: 0,evictions: 0,startTime: Date.now()};if(this.config.enablePersistence){localStorage.removeItem('khanelconcept_cache');}}configure(options){this.config={...this.config,...options};}}class CachedAPIClient{constructor(baseURL,cacheSystem){this.baseURL=baseURL;this.cache=cacheSystem;this.defaultHeaders={'Content-Type': 'application/json'};}async get(endpoint,options={}){const{cache='dynamic',headers={},ignoreCache=false,...fetchOptions}=options;const cacheKey=this.generateCacheKey('GET',endpoint,fetchOptions);if(!ignoreCache){const cachedData=this.cache.get(cacheKey);if(cachedData){return cachedData;}}try{const response=await fetch(`${this.baseURL}${endpoint}`,{method: 'GET',headers:{...this.defaultHeaders,...headers},...fetchOptions});if(!response.ok){throw new Error(`HTTP error! status: ${response.status}`);}const data=await response.json();if(response.status===200){this.cache.set(cacheKey,data,cache);}return data;}catch(error){console.error('API request failed:',error);throw error;}}async post(endpoint,data,options={}){const{headers={},invalidateCache=[],...fetchOptions}=options;try{const response=await fetch(`${this.baseURL}${endpoint}`,{method: 'POST',headers:{...this.defaultHeaders,...headers},body: JSON.stringify(data),...fetchOptions});if(!response.ok){throw new Error(`HTTP error! status: ${response.status}`);}const result=await response.json();if(invalidateCache.length > 0){invalidateCache.forEach(pattern=>{this.cache.invalidate(pattern);});}return result;}catch(error){console.error('API request failed:',error);throw error;}}async put(endpoint,data,options={}){const{headers={},invalidateCache=[],...fetchOptions}=options;try{const response=await fetch(`${this.baseURL}${endpoint}`,{method: 'PUT',headers:{...this.defaultHeaders,...headers},body: JSON.stringify(data),...fetchOptions});if(!response.ok){throw new Error(`HTTP error! status: ${response.status}`);}const result=await response.json();if(invalidateCache.length > 0){invalidateCache.forEach(pattern=>{this.cache.invalidate(pattern);});}return result;}catch(error){console.error('API request failed:',error);throw error;}}async delete(endpoint,options={}){const{headers={},invalidateCache=[],...fetchOptions}=options;try{const response=await fetch(`${this.baseURL}${endpoint}`,{method: 'DELETE',headers:{...this.defaultHeaders,...headers},...fetchOptions});if(!response.ok){throw new Error(`HTTP error! status: ${response.status}`);}const result=await response.json();if(invalidateCache.length > 0){invalidateCache.forEach(pattern=>{this.cache.invalidate(pattern);});}return result;}catch(error){console.error('API request failed:',error);throw error;}}generateCacheKey(method,endpoint,options={}){const optionsStr=JSON.stringify(options);return `${method}:${endpoint}:${btoa(optionsStr)}`;}setAuthToken(token){if(token){this.defaultHeaders['Authorization']=`Bearer ${token}`;}else{delete this.defaultHeaders['Authorization'];}}}const cacheSystem=new CacheSystem();cacheSystem.configure({maxSize: 200,defaultTTL: 10*60*1000,compression: true,enablePersistence: true});const backendUrl=window.location.hostname==='localhost' ? 'http: : 'https: const apiClient=new CachedAPIClient(backendUrl,cacheSystem);document.addEventListener('DOMContentLoaded',()=>{const token=localStorage.getItem('khanelconcept_token')|| localStorage.getItem('khanelconcept_admin_token');if(token){apiClient.setAuthToken(token);}});window.CacheSystem=cacheSystem;window.ApiClient=apiClient;window.cacheDebug={stats:()=> cacheSystem.getStats(),clear:()=> cacheSystem.clear(),get:(key)=> cacheSystem.get(key),invalidate:(pattern)=> cacheSystem.invalidate(pattern)};