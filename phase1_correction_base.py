#!/usr/bin/env python3
"""
PHASE 1 : CORRECTION DE LA BASE
Identifier et supprimer les villas fictives, garder uniquement les vraies villas
"""

import asyncio
import json
from motor.motor_asyncio import AsyncIOMotorClient
import os
from datetime import datetime

# Configuration MongoDB
MONGO_URL = os.getenv('MONGO_URL', 'mongodb://localhost:27017')
DB_NAME = 'khanelconcept'

# VRAIES VILLAS bas√©es sur le site web https://kenneson972.github.io/ALLINCLUSIVE2.0/
VRAIES_VILLAS_SITE = {
    "Villa F3 Petit Macabou": {
        "description": "6 personnes + 9 invit√©s",
        "features": "Sauna, Jacuzzi, 2 douches ext√©rieures", 
        "current_price": 850,
        "location": "Petit Macabou au Vauclin"
    },
    "Villa F5 Ste Anne": {
        "description": "10 personnes + 15 invit√©s",
        "features": "Piscine, d√©coration rose distinctive",
        "current_price": 1300,
        "location": "Quartier Les Anglais, Ste Anne"
    },
    "Villa F3 Baccha Petit Macabou": {
        "description": "6 personnes + 9 convives",
        "features": "Piscine, terrasses modernes",
        "current_price": 1350,
        "location": "Petit Macabou"
    },
    "Villa F6 Lamentin": {
        "description": "10 personnes + 20 invit√©s max",
        "features": "Piscine, Jacuzzi, douche ext√©rieure",
        "current_price": 1500,
        "location": "Quartier B√©l√®me au Lamentin"
    },
    "Villa F6 Ste Luce Plage": {
        "description": "12 personnes",
        "features": "Face √† la plage, piscine, terrasse vue mer",
        "current_price": 1200,
        "location": "Sainte-Luce face √† la plage"
    },
    "Villa F6 Petit Macabou": {
        "description": "12 personnes + 20 invit√©s",
        "features": "Vue mer, villa moderne, studio mezzanine",
        "current_price": 2000,
        "location": "Petit Macabou, Vauclin"
    },
    "Villa F7 Baie des Mulets": {
        "description": "14 personnes",
        "features": "Grande villa, vue mer, v√©randa bambou",
        "current_price": 2500,
        "location": "Baie des Mulets, Vauclin"
    },
    "Villa F3 Trinit√© Cosmy": {
        "description": "6 personnes",
        "features": "Piscine chauff√©e, vue collines et oc√©an",
        "current_price": 900,
        "location": "Trinit√© - Cosmy"
    },
    "Villa F5 Rivi√®re-Pilote La Ren√©e": {
        "description": "10 personnes",
        "features": "Terrasse bois, hamacs, salon ext√©rieur",
        "current_price": 1400,
        "location": "Rivi√®re-Pilote - La Ren√©e"
    },
    "Villa F3 Le Fran√ßois": {
        "description": "6 personnes",
        "features": "Vue mer, terrasses panoramiques",
        "current_price": 800,
        "location": "Le Fran√ßois, Martinique"
    },
    "Villa F5 Vauclin Ravine Plate": {
        "description": "10 personnes max",
        "features": "Piscine √† d√©bordement, gazebo, vue collines",
        "current_price": 1550,
        "location": "Vauclin - Ravine Plate"
    },
    "Bas Villa F3 Ste Luce": {
        "description": "4 personnes",
        "features": "Terrasse couverte, √©clairage LED",
        "current_price": 470,
        "location": "Sainte-Luce"
    },
    "Villa F3 Trenelle": {
        "description": "6 personnes",
        "features": "Location longue dur√©e, enti√®rement √©quip√©e",
        "current_price": 800,
        "location": "Trenelle, Location Annuelle"
    },
    "Studio Cocooning Lamentin": {
        "description": "2 personnes (couple)",
        "features": "Jacuzzi priv√©, vue panoramique",
        "current_price": 290,
        "location": "Morne Pitault, Lamentin"
    },
    "Villa F3 Le Robert": {
        "description": "6 personnes",
        "features": "Piscine rectangulaire, pergola, kitchenette",
        "current_price": 630,
        "location": "Robert - Pointe Hyacinthe"
    },
    "Espace Piscine Journ√©e Bungalow": {
        "description": "8 personnes en journ√©e",
        "features": "Bungalow cr√©ole, piscine, v√©randa",
        "current_price": 150,
        "location": "Martinique"
    },
    "Villa F√™te Ducos": {
        "description": "Jusqu'√† 25 personnes",
        "features": "Piscine, bar ext√©rieur, gazebo",
        "current_price": 200,
        "location": "Ducos, Martinique"
    },
    "Villa F√™te Fort-de-France": {
        "description": "Jusqu'√† 30 personnes",
        "features": "Piscine, v√©randa coloniale, vue panoramique",
        "current_price": 250,
        "location": "Fort-de-France, Martinique"
    },
    "Villa F√™te Rivi√®re-Pilote": {
        "description": "Jusqu'√† 20 personnes",
        "features": "Villa cr√©ole, piscine tropicale",
        "current_price": 180,
        "location": "Rivi√®re-Pilote, Martinique"
    },
    "Villa F√™te Sainte-Luce": {
        "description": "Jusqu'√† 35 personnes",
        "features": "Villa moderne, tentes, mobilier √©v√©nementiel",
        "current_price": 220,
        "location": "Sainte-Luce, Martinique"
    },
    "Villa F√™te Rivi√®re-Sal√©e": {
        "description": "Jusqu'√† 15 personnes",
        "features": "Piscine, tente couverte",
        "current_price": 160,
        "location": "Rivi√®re-Sal√©e, Martinique"
    }
}

# VILLAS FICTIVES √† supprimer (cr√©√©es par erreur)
VILLAS_FICTIVES = [
    "Villa Sunset Paradise",
    "Villa Tropicale Zen", 
    "Villa Anses d'Arlet",
    "Villa Bord de Mer Tartane",
    "Villa Rivi√®re-Pilote Charme",
    "Villa Marigot Exclusive",
    "Villa Sainte-Marie Familiale",
    "Studio Marin Cosy",
    "Villa Diamant Prestige",
    "Villa Carbet Deluxe",
    "Villa Oc√©an Bleu",
    "Penthouse Schoelcher Vue Mer",
    "Villa Fran√ßois Moderne",
    "Villa Grand Luxe Pointe du Bout",
    "Bungalow Trenelle Nature",
    "Appartement Marina Fort-de-France",
    "Studio Ducos Pratique"
]

async def connect_to_mongo():
    """Connexion √† MongoDB"""
    client = AsyncIOMotorClient(MONGO_URL)
    db = client[DB_NAME]
    return db

async def analyze_current_database():
    """Analyse de la base actuelle"""
    db = await connect_to_mongo()
    
    print("üìä ANALYSE DE LA BASE ACTUELLE")
    print("-" * 40)
    
    # R√©cup√©rer toutes les villas
    villas = await db.villas.find({}).to_list(None)
    
    print(f"Total villas en base: {len(villas)}")
    
    # S√©parer vraies vs fictives
    vraies_villas_trouvees = []
    villas_fictives_trouvees = []
    villas_inconnues = []
    
    for villa in villas:
        nom = villa.get('name', '')
        if nom in VRAIES_VILLAS_SITE:
            vraies_villas_trouvees.append(nom)
        elif nom in VILLAS_FICTIVES:
            villas_fictives_trouvees.append(nom)
        else:
            villas_inconnues.append(nom)
    
    print(f"\n‚úÖ VRAIES VILLAS TROUV√âES ({len(vraies_villas_trouvees)}):")
    for villa in sorted(vraies_villas_trouvees):
        print(f"   - {villa}")
    
    print(f"\n‚ùå VILLAS FICTIVES TROUV√âES ({len(villas_fictives_trouvees)}):")
    for villa in sorted(villas_fictives_trouvees):
        print(f"   - {villa}")
    
    print(f"\n‚ùì VILLAS INCONNUES ({len(villas_inconnues)}):")
    for villa in sorted(villas_inconnues):
        print(f"   - {villa}")
    
    # Villas manquantes
    villas_manquantes = []
    for villa_vraie in VRAIES_VILLAS_SITE:
        if villa_vraie not in vraies_villas_trouvees:
            villas_manquantes.append(villa_vraie)
    
    print(f"\n‚ö†Ô∏è  VILLAS MANQUANTES ({len(villas_manquantes)}):")
    for villa in sorted(villas_manquantes):
        print(f"   - {villa}")
    
    return {
        'vraies_trouvees': vraies_villas_trouvees,
        'fictives_trouvees': villas_fictives_trouvees,
        'inconnues': villas_inconnues,
        'manquantes': villas_manquantes,
        'total_actuel': len(villas)
    }

async def supprimer_villas_fictives():
    """Supprime les villas fictives"""
    db = await connect_to_mongo()
    
    print(f"\nüóëÔ∏è  SUPPRESSION DES VILLAS FICTIVES")
    print("-" * 40)
    
    supprimees = 0
    for villa_fictive in VILLAS_FICTIVES:
        result = await db.villas.delete_one({'name': villa_fictive})
        if result.deleted_count > 0:
            print(f"‚úÖ Supprim√©e: {villa_fictive}")
            supprimees += 1
        else:
            print(f"‚ö†Ô∏è  Pas trouv√©e: {villa_fictive}")
    
    print(f"\nüìä R√âSULTATS SUPPRESSION:")
    print(f"   - Villas supprim√©es: {supprimees}")
    print(f"   - Villas non trouv√©es: {len(VILLAS_FICTIVES) - supprimees}")
    
    return supprimees

async def creer_villas_manquantes():
    """Cr√©e les villas manquantes bas√©es sur le site web"""
    db = await connect_to_mongo()
    
    print(f"\nüÜï CR√âATION DES VILLAS MANQUANTES")
    print("-" * 40)
    
    # R√©cup√©rer les villas existantes
    villas_existantes = await db.villas.find({}, {'name': 1}).to_list(None)
    noms_existants = [v['name'] for v in villas_existantes]
    
    creees = 0
    for villa_name, villa_data in VRAIES_VILLAS_SITE.items():
        if villa_name not in noms_existants:
            # Cr√©er la villa avec les donn√©es du site
            nouvelle_villa = {
                'id': str(len(await db.villas.find({}).to_list(None)) + 1),
                'name': villa_name,
                'location': villa_data['location'],
                'price': villa_data['current_price'],
                'guests': extract_guests_number(villa_data['description']),
                'features': villa_data['features'],
                'description': f"Villa {villa_name} - {villa_data['description']}",
                'category': determine_category(villa_name),
                'image': generate_image_path(villa_name),
                'gallery': generate_gallery_paths(villa_name),
                'fallback_icon': get_fallback_icon(villa_name),
                'amenities': extract_amenities(villa_data['features']),
                'created_at': datetime.utcnow(),
                'source': 'site_web_reel'
            }
            
            await db.villas.insert_one(nouvelle_villa)
            print(f"‚úÖ Cr√©√©e: {villa_name}")
            creees += 1
        else:
            print(f"‚ö†Ô∏è  Existe d√©j√†: {villa_name}")
    
    print(f"\nüìä R√âSULTATS CR√âATION:")
    print(f"   - Villas cr√©√©es: {creees}")
    
    return creees

def extract_guests_number(description):
    """Extrait le nombre d'invit√©s de la description"""
    import re
    match = re.search(r'(\d+)\s+personnes?', description)
    return int(match.group(1)) if match else 4

def determine_category(villa_name):
    """D√©termine la cat√©gorie de la villa"""
    if 'F√™te' in villa_name or 'Journ√©e' in villa_name:
        return 'fete'
    elif 'Studio' in villa_name or 'Bas' in villa_name:
        return 'special'
    else:
        return 'sejour'

def generate_image_path(villa_name):
    """G√©n√®re le chemin de l'image principale"""
    # Conversion simple du nom en chemin
    clean_name = villa_name.replace(' ', '_').replace('-', '_')
    return f"/images/{clean_name}/01_piscine_exterieur.jpg"

def generate_gallery_paths(villa_name):
    """G√©n√®re les chemins de galerie"""
    clean_name = villa_name.replace(' ', '_').replace('-', '_')
    return [
        f"/images/{clean_name}/01_piscine_exterieur.jpg",
        f"/images/{clean_name}/02_terrasse_salon.jpg",
        f"/images/{clean_name}/03_chambre_principale.jpg",
        f"/images/{clean_name}/04_cuisine_equipee.jpg",
        f"/images/{clean_name}/05_salle_bain.jpg",
        f"/images/{clean_name}/06_vue_panoramique.jpg"
    ]

def get_fallback_icon(villa_name):
    """G√©n√®re l'ic√¥ne de fallback"""
    if 'F√™te' in villa_name:
        return 'üéâ'
    elif 'Studio' in villa_name:
        return 'üíï'
    elif 'Piscine' in villa_name:
        return 'üèä'
    elif 'F7' in villa_name:
        return 'üèÑ'
    else:
        return 'üè°'

def extract_amenities(features):
    """Extrait les √©quipements des features"""
    amenities = []
    features_lower = features.lower()
    
    if 'piscine' in features_lower:
        amenities.append('Piscine')
    if 'jacuzzi' in features_lower:
        amenities.append('Jacuzzi')
    if 'sauna' in features_lower:
        amenities.append('Sauna')
    if 'vue mer' in features_lower:
        amenities.append('Vue mer')
    if 'terrasse' in features_lower:
        amenities.append('Terrasse')
    if 'parking' in features_lower:
        amenities.append('Parking')
    
    # Ajouter √©quipements par d√©faut
    amenities.extend(['WiFi', 'Climatisation', 'Cuisine √©quip√©e'])
    
    return list(set(amenities))  # Supprimer les doublons

async def main():
    """Fonction principale Phase 1"""
    print("üîß PHASE 1 : CORRECTION DE LA BASE")
    print("=" * 50)
    
    try:
        # Analyser la base actuelle
        analyse = await analyze_current_database()
        
        # Cr√©er un backup
        db = await connect_to_mongo()
        villas_backup = await db.villas.find({}).to_list(None)
        
        with open('/app/backup_phase1.json', 'w') as f:
            json.dump(villas_backup, f, indent=2, default=str)
        print(f"\nüíæ Backup cr√©√©: /app/backup_phase1.json")
        
        # Supprimer les villas fictives
        supprimees = await supprimer_villas_fictives()
        
        # Cr√©er les villas manquantes
        creees = await creer_villas_manquantes()
        
        # V√©rification finale
        villas_finales = await db.villas.find({}).to_list(None)
        
        print(f"\nüìä R√âSULTATS PHASE 1:")
        print(f"   - Villas au d√©but: {analyse['total_actuel']}")
        print(f"   - Villas supprim√©es: {supprimees}")
        print(f"   - Villas cr√©√©es: {creees}")
        print(f"   - Villas finales: {len(villas_finales)}")
        print(f"   - Objectif: {len(VRAIES_VILLAS_SITE)} vraies villas")
        
        # Rapport final
        rapport = {
            'phase': 1,
            'date': datetime.utcnow(),
            'villas_initiales': analyse['total_actuel'],
            'villas_supprimees': supprimees,
            'villas_creees': creees,
            'villas_finales': len(villas_finales),
            'objectif': len(VRAIES_VILLAS_SITE),
            'success': len(villas_finales) == len(VRAIES_VILLAS_SITE)
        }
        
        await db.correction_phase1_report.insert_one(rapport)
        
        if len(villas_finales) == len(VRAIES_VILLAS_SITE):
            print(f"\n‚úÖ PHASE 1 TERMIN√âE AVEC SUCC√àS")
            print(f"üéØ Base corrig√©e: {len(VRAIES_VILLAS_SITE)} vraies villas")
        else:
            print(f"\n‚ö†Ô∏è  PHASE 1 TERMIN√âE AVEC AVERTISSEMENT")
            print(f"üéØ {len(villas_finales)} villas au lieu de {len(VRAIES_VILLAS_SITE)} attendues")
        
    except Exception as e:
        print(f"‚ùå Erreur Phase 1: {e}")

if __name__ == "__main__":
    asyncio.run(main())